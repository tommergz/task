import React from 'react';
import Enzyme from 'enzyme';
import { mount } from "enzyme";
import Board from '../board';
import App from './app';
import Adapter from 'enzyme-adapter-react-16';

Enzyme.configure({ adapter: new Adapter() })

describe('(Component) App', () => {

  const wrapper = mount(<App />);
  
  it('it should render Board', () => {
    expect(wrapper.find(Board).exists()).toBe(true);
  });

  it('input', () => {
    wrapper.find("input").instance().value = "C 10 10";
    expect(wrapper.find("input").instance().value).toEqual("C 10 10");
  });

  it("canvas", () => {

    wrapper.find("input").instance().value = "C 10 10";
    wrapper.find('button').simulate("click");
    expect(wrapper.instance().state.canvas).toEqual(
      [
        ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"], 
        ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
      ]
    );    
  });

  it('lines', () => {

    wrapper.find("input").instance().value = "L 3 3 7 3";
    wrapper.find('button').simulate("click");
    wrapper.find("input").instance().value = "L 8 1 8 10";
    wrapper.find('button').simulate("click");
    expect(wrapper.instance().state.canvas).toEqual(
      [
        ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", "x", "x", "x", "x", "x", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
      ]
    );    
  });
  it('rectangle', () => {

    wrapper.find("input").instance().value = "R 3 5 6 9";
    wrapper.find('button').simulate("click");
    expect(wrapper.instance().state.canvas).toEqual(
      [
        ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", "x", "x", "x", "x", "x", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", "x", "x", "x", "x", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", "x", " ", " ", "x", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", "x", " ", " ", "x", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", "x", " ", " ", "x", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", "x", "x", "x", "x", " ", "x", " ", " ", "|"], 
        ["|", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", "|"], 
        ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
      ]
    );    
  });
  it('bucket', () => {

    wrapper.find("input").instance().value = "B 1 1 -";
    wrapper.find('button').simulate("click");
    expect(wrapper.instance().state.canvas).toEqual(
      [
        ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
        ['|', '-', '-', '-', '-', '-', '-', '-', 'x', ' ', ' ', '|'],
        ['|', '-', '-', '-', '-', '-', '-', '-', 'x', ' ', ' ', '|'],
        ['|', '-', '-', 'x', 'x', 'x', 'x', 'x', 'x', ' ', ' ', '|'],
        ['|', '-', '-', '-', '-', '-', '-', '-', 'x', ' ', ' ', '|'],
        ['|', '-', '-', 'x', 'x', 'x', 'x', '-', 'x', ' ', ' ', '|'],
        ['|', '-', '-', 'x', ' ', ' ', 'x', '-', 'x', ' ', ' ', '|'],
        ['|', '-', '-', 'x', ' ', ' ', 'x', '-', 'x', ' ', ' ', '|'],
        ['|', '-', '-', 'x', ' ', ' ', 'x', '-', 'x', ' ', ' ', '|'],
        ['|', '-', '-', 'x', 'x', 'x', 'x', '-', 'x', ' ', ' ', '|'],
        ['|', '-', '-', '-', '-', '-', '-', '-', 'x', ' ', ' ', '|'],
        ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
      ]    
    );    
  });
})
